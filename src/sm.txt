https://docs.emailhippo.com/#more-edition-1-v2-endpoint-get-email-address-verification-result
Check if an email is from a disposable service using the Email Hippo API.
title='Email Hippo APIs' base_url='' endpoints=[endpoint(method='GET', path='https://api1.27hub.com/api/emh/a/v2?k={k}&e={e}', description='Performs email address verification (Edition 1 - V2).', parameters=['k: path, string, true, the license key', 'e: path, string, true, the email address to validate'], requires_api_key=True, request_example='curl -i -H "Accept: application/json" "//api1.27hub.com/api/emh/a/v2?k={YOUR_API_KEY}&e={EMAIL_ADDRESS}"', response_example='{\n  "result" : "string" ,\n  "reason" : "string" ,\n  "role" : true ,\n  "free" : true ,\n  "disposable" : true ,\n  "email" : "string" ,\n  "domain" : "string" ,\n  "user" : "string" ,\n  "mailServerLocation" : "string" ,\n  "duration" : 0\n}'), endpoint(method='GET', path='https://api.hippoapi.com/customer/reports/v3/quota/{k}', description='Retrieves the current usage details for a given license key (Edition 2 - V3).', parameters=['k: path, string, true, the license key'], requires_api_key=True, request_example='curl -i -H "Accept: application/json" "https://api.hippoapi.com/customer/reports/v3/quota/YOUR_API_KEY"', response_example='{\n  "accountId" : 0 ,\n  "licenseKey" : "string" ,\n  "quotaUsed" : 0 ,\n  "quotaRemaining" : 0 ,\n  "nextQuotaResetDate" : "2018-08-09T10:26:42Z" ,\n  "reportedDate" : "2018-08-09T10:26:42Z" ,\n  "errorSummary" : "string"\n}'), endpoint(method='GET', path='https://api.hippoapi.com/v3/more/json/{k}/{e}', description='Performs email address verification to the full data enrichment level and returns the data in JSON format (Edition 2 - V3).', parameters=['k: path, string, true, the license key', 'e: path, string, true, the email address to validate'], requires_api_key=True, request_example='curl -i -H "Accept: application/json" "https://api.hippoapi.com/v3/more/json/YOUR_API_KEY/EMAIL_ADDRESS"', response_example='{\n  "version" : { "v" : "string" , "doc" : "string" },\n  "meta" : {\n    "lastModified" : "string" , "expires" : "string" , "email" : "string" ,\n    "tld" : "string" , "domain" : "string" , "subDomain" : "string" ,\n    "user" : "string" , "emailHashMd5" : "string" , "emailHashSha1" : "string" ,\n    "emailHashSha256" : "string"\n  },\n  "disposition" : { "isRole" : true , "isFreeMail" : true },\n  "emailVerification" : {\n    "syntaxVerification" : { "isSyntaxValid" : true , "reason" : "string" },\n    "dnsVerification" : {\n      "isDomainHasDnsRecord" : true , "isDomainHasMxRecords" : true ,\n      "recordRoot" : { "ipAddresses" : [ "string" ] },\n      "recordWww" : { "ipAddresses" : [ "string" ] },\n      "mxRecords" : [ { "preference" : 0 , "exchange" : "string" , "ipAddresses" : [ "string" ] } ],\n      "txtRecords" : [ "string" ]\n    },\n    "mailboxVerification" : { "result" : 0 , "reason" : 0 }\n  },\n  "infrastructure" : {\n    "mail" : { "serviceTypeId" : "string" , "mailServerLocation" : "string" , "smtpBanner" : "string" }\n  },\n  "sendAssess" : { "inboxQualityScore" : 0 , "sendRecommendation" : "string" },\n  "spamAssess" : {\n    "isDisposableEmailAddress" : true , "isDarkWebEmailAddress" : true ,\n    "isGibberishDomain" : true , "isGibberishUser" : true , "domainRiskScore" : 0 ,\n    "formatRiskScore" : 0 , "profanityRiskScore" : 0 , "overallRiskScore" : 0 ,\n    "actionRecomendation" : "string" ,\n    "blockLists" : [ { "blockListName" : "string" , "isListed" : true , "listedReason" : "string" , "listedMoreInfo" : "string" } ]\n  },\n  "spamTrapAssess" : { "isSpamTrap" : true , "spamTrapDescriptor" : "string" },\n  "hippoTrust" : { "score" : 0 , "level" : "string" },\n  "social" : { "gravatar" : { "imageUrl" : "string" , "profileUrl" : "string" } },\n  "domain" : "string" ,\n  "performance" : {\n    "syntaxCheck" : 0 , "dnsLookup" : 0 , "spamAssessment" : 0 ,\n    "mailboxVerification" : 0 , "webInfrastructurePing" : 0 , "other" : 0 ,\n    "overallExecutionTime" : 0\n  },\n  "diagnostic" : { "key" : "string" }\n}'), endpoint(method='GET', path='https://api.hippoapi.com/v3/more/bson/{k}/{e}', description='Performs email address verification to the full data enrichment level and returns the data in BSON format (Edition 2 - V3).', parameters=['k: path, string, true, the license key', 'e: path, string, true, the email address to validate'], requires_api_key=True, request_example='Not explicitly provided, but similar to JSON example.', response_example='Schema is the same as JSON response, but data is in BSON format.'), endpoint(method='GET', path='https://api.hippoapi.com/v3/more/xml/{k}/{e}', description='Performs email address verification to the full data enrichment level and returns the data in XML format (Edition 2 - V3).', parameters=['k: path, string, true, the license key', 'e: path, string, true, the email address to validate'], requires_api_key=True, request_example='Not explicitly provided, but similar to JSON example.', response_example='Schema is the same as JSON response, but data is in XML format.'), endpoint(method='GET', path='https://api.hippoapi.com/v3/more/proto/{k}/{e}', description='Performs email address verification to the full data enrichment level and returns the data in Protobuf format (Edition 2 - V3).', parameters=['k: path, string, true, the license key', 'e: path, string, true, the email address to validate'], requires_api_key=True, request_example='Not explicitly provided, but similar to JSON example.', response_example='Schema is the same as JSON response, but data is in Protobuf format.'), endpoint(method='GET', path='https://api.whoishippo.com/v1/{k}/{d}', description='Query WHOIS records by domain and license key (Edition 1 - V1).', parameters=['k: path, string, true, the license key', 'd: path, string, true, the domain to query'], requires_api_key=True, request_example="curl -X GET //api.whoishippo.com/v1/{k}/{d} -H 'Accept: application/json'", response_example='{\n  "version" : { "v" : "string" , "doc" : "string" },\n  "meta" : {\n    "recordCreatedDate" : "2018-08-09T10:26:42Z" , "recordUpdatedDate" : "2018-08-09T10:26:42Z" ,\n    "recordAge" : "string" , "recordAgeIso8601" : "string" , "timeToExpiry" : "string" ,\n    "timeToExpirySeconds" : 0 , "timeToExpiryIso8601" : "string" , "tld" : "string" ,\n    "domain" : "string" , "domainAge" : "string" , "domainAgeSeconds" : 0 ,\n    "domainAgeIso8601" : "string" , "parseCode" : "string" , "executionTime" : 0\n  },\n  "whoisServerRecord" : {\n    "recordFound" : true ,\n    "registrar" : {\n      "registrarId" : "string" , "name" : "string" , "whois" : "string" ,\n      "url" : "string" , "abuseEmail" : "string" , "abusePhone" : "string"\n    },\n    "dnsSec" : "string" , "domainName" : "string" , "tld" : "string" ,\n    "domainHandle" : "string" ,\n    "domainOwnerContact" : {\n      "userId" : "string" , "name" : "string" , "organization" : "string" ,\n      "street1" : "string" , "street2" : "string" , "street3" : "string" ,\n      "street4" : "string" , "city" : "string" , "state" : "string" ,\n      "postalCode" : "string" , "country" : "string" , "phoneNumber" : "string" ,\n      "phoneNumberExt" : "string" , "faxNumber" : "string" , "faxNumberExt" : "string" ,\n      "email" : "string"\n    },\n    "adminContact" : { "userId" : "string" , "name" : "string" , "organization" : "string" , "street1" : "string" , "street2" : "string" , "street3" : "string" , "street4" : "string" , "city" : "string" , "state" : "string" , "postalCode" : "string" , "country" : "string" , "phoneNumber" : "string" , "phoneNumberExt" : "string" , "faxNumber" : "string" , "faxNumberExt" : "string" , "email" : "string" },\n    "billingContact" : { "userId" : "string" , "name" : "string" , "organization" : "string" , "street1" : "string" , "street2" : "string" , "street3" : "string" , "street4" : "string" , "city" : "string" , "state" : "string" , "postalCode" : "string" , "country" : "string" , "phoneNumber" : "string" , "phoneNumberExt" : "string" , "faxNumber" : "string" , "faxNumberExt" : "string" , "email" : "string" },\n    "techContact" : { "userId" : "string" , "name" : "string" , "organization" : "string" , "street1" : "string" , "street2" : "string" , "street3" : "string" , "street4" : "string" , "city" : "string" , "state" : "string" , "postalCode" : "string" , "country" : "string" , "phoneNumber" : "string" , "phoneNumberExt" : "string" , "faxNumber" : "string" , "faxNumberExt" : "string" , "email" : "string" },\n    "registrarContact" : { "userId" : "string" , "name" : "string" , "organization" : "string" , "street1" : "string" , "street2" : "string" , "street3" : "string" , "street4" : "string" , "city" : "string" , "state" : "string" , "postalCode" : "string" , "country" : "string" , "phoneNumber" : "string" , "phoneNumberExt" : "string" , "faxNumber" : "string" , "faxNumberExt" : "string" , "email" : "string" },\n    "zoneContact" : { "userId" : "string" , "name" : "string" , "organization" : "string" , "street1" : "string" , "street2" : "string" , "street3" : "string" , "street4" : "string" , "city" : "string" , "state" : "string" , "postalCode" : "string" , "country" : "string" , "phoneNumber" : "string" , "phoneNumberExt" : "string" , "faxNumber" : "string" , "faxNumberExt" : "string" , "email" : "string" },\n    "nameServers" : [ { "Address" : "string" } ],\n    "domainStati" : [ "string" ], "remarks" : "string" , "reseller" : "string" ,\n    "created" : "2018-08-09T10:26:42Z" , "changed" : "2018-08-09T10:26:42Z" ,\n    "expiry" : "2018-08-09T10:26:42Z" , "rawResponse" : "string" ,\n    "customFields" : [ { "customFieldId" : 0 , "name" : "string" , "value" : "string" } ]\n  }\n}')]
Performs email address verification (Edition 1 - V2).

Retrieves the current usage details for a given license key (Edition 2 - V3).

Performs email address verification to the full data enrichment level and returns the data in JSON format (Edition 2 - V3).

Performs email address verification to the full data enrichment level and returns the data in BSON format (Edition 2 - V3).

Performs email address verification to the full data enrichment level and returns the data in XML format (Edition 2 - V3).

Performs email address verification to the full data enrichment level and returns the data in Protobuf format (Edition 2 - V3).

Query WHOIS records by domain and license key (Edition 1 - V1).
